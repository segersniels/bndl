on:
  workflow_dispatch:
    inputs:
      crate:
        description: "Crate to publish"
        required: true
        type: choice
        options:
          - bndl_cli
          - bndl_convert

concurrency:
  group: publish-${{ inputs.crate }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features

  build:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-unknown-linux-musl,
              exe: amd64-linux,
              os: ubuntu-latest,
            }
          - {
              target: aarch64-unknown-linux-musl,
              exe: aarch64-linux,
              os: ubuntu-latest,
            }
          - { target: x86_64-apple-darwin, exe: macos, os: macos-latest }
    runs-on: ${{ matrix.job.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          args: --release --target=${{ matrix.job.target }} --locked
          command: build
      - name: Rename result
        run: |
          rm target/${{ matrix.job.target }}/release/${{ inputs.package }}.d
          cp target/${{ matrix.job.target }}/release/${{ inputs.package }}* ${{ inputs.package }}-${{ matrix.job.exe }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bin
          path: ${{ inputs.package }}-${{ matrix.job.exe }}

  release:
    needs: build
    environment: production
    runs-on: ubuntu-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.exists }}
      current_version: ${{ steps.current_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: bin
          path: crates/${{ inputs.package }}/bin
      - name: Get current package version
        id: current_version
        run: echo "version=$(make version)" >> $GITHUB_OUTPUT
        working-directory: crates/${{ inputs.package }}
      - uses: mukunku/tag-exists-action@v1.4.0
        id: check_tag
        with:
          tag: "${{ steps.current_version.outputs.version }}"
      - uses: "marvinpinto/action-automatic-releases@latest"
        if: steps.check_tag.outputs.exists == 'false'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.current_version.outputs.version }}"
          prerelease: false
          working-directory: crates/${{ inputs.package }}
          files: |
            ./bin/${{ inputs.package }}-macos
            ./bin/${{ inputs.package }}-aarch64-linux
            ./bin/${{ inputs.package }}-amd64-linux

  cargo:
    needs: release
    environment: production
    runs-on: ubuntu-latest
    if: needs.release.outputs.tag_exists == 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Publish to Cargo
        run: cargo publish --allow-dirty --package ${{ inputs.package }} || true
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  npm:
    needs: [release, cargo]
    environment: production
    runs-on: ubuntu-latest
    if: needs.release.outputs.tag_exists == 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
      - uses: actions/download-artifact@v3
        with:
          name: bin
          path: crates/${{ inputs.package }}/bin
      - name: Publish to NPM
        run: |
          npm version ${{ needs.release.outputs.current_version }} --no-git-tag-version --no-commit-hooks --allow-same-version
          npm publish || true
        working-directory: crates/${{ inputs.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
